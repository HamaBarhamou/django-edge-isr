{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-edge-isr","text":"<p>Incremental Static Revalidation for Django \u2014 CDN-grade performance with fresh data. Serve cached pages fast and revalidate in the background when content changes, targeting only affected URLs.</p> <p>Status: Alpha. We\u2019re building out the 0.x series with safety rails and docs.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>SWR semantics: <code>Cache-Control: s-maxage=N, stale-while-revalidate=M</code></li> <li>Tag-based invalidation across pages &amp; fragments</li> <li>On-demand revalidation via signals/commands</li> <li>Optional CDN connectors: Cloudflare (0.1), CloudFront (0.2)</li> <li>Warmup jobs to prefill caches and avoid stampede</li> <li>Admin JSON endpoints to inspect tags \u2192 URLs</li> </ul> <p>Jump to: Quickstart \u00b7 Concepts \u00b7 API</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning (as much as possible for a 0.x series).</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":"<p>Nothing yet.</p>"},{"location":"CHANGELOG/#008-2025-10-08","title":"[0.0.8] \u2013 2025-10-08","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Release guide (<code>docs/release.md</code>).</li> <li>Tests: ensure <code>Vary</code> headers are merged (existing <code>Vary</code> + decorator <code>vary=[]</code>).</li> <li>Tests: no binding occurs when a view returns non-200.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>README: fully rewritten in English; clearer install &amp; docs links; explicit alpha scope.</li> <li>README: mark Cloudflare connector as experimental; remove extras install examples (Celery/RQ/CloudFront) until supported.</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Avoid Jekyll/Liquid pitfalls in README (wrap template examples in <code>{% raw %}...{% endraw %}</code>).</li> </ul>"},{"location":"CHANGELOG/#007-2025-10-08","title":"[0.0.7] \u2013 2025-10-08","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>First public PyPI release (<code>pip install django-edge-isr</code>).</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Packaging metadata &amp; CI release workflow adjustments.</li> </ul>"},{"location":"CHANGELOG/#006-2025-10-07","title":"[0.0.6] \u2013 2025-10-07","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>CI release pipeline refinements (artifact handling, metadata checks).</li> </ul>"},{"location":"CHANGELOG/#005-2025-10-07","title":"[0.0.5] \u2013 2025-10-07","text":""},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Version bump &amp; minor workflow tweaks.</li> </ul>"},{"location":"CHANGELOG/#004-2025-10-07","title":"[0.0.4] \u2013 2025-10-07","text":""},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Release workflow fixes (split build/publish, gating via <code>PUBLISH_TO_PYPI</code>).</li> </ul>"},{"location":"CHANGELOG/#003-2025-10-07","title":"[0.0.3] \u2013 2025-10-07","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>GitHub Pages docs publishing.</li> </ul>"},{"location":"CHANGELOG/#001-2025-10-06","title":"[0.0.1] \u2013 2025-10-06","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>MVP: <code>@isr</code> decorator, middleware (SWR headers), tag graph (Redis), revalidation tasks (purge + warmup), admin endpoints.</li> <li>Basic tests for headers, tag binding, revalidation flow.</li> </ul>"},{"location":"admin/","title":"Admin & Observability","text":""},{"location":"admin/#docsadminmd","title":"<code>docs/admin.md</code>","text":"<p>```markdown</p>"},{"location":"admin/#admin-observability","title":"Admin &amp; Observability","text":""},{"location":"admin/#json-endpoints-staff-only","title":"JSON Endpoints (staff only)","text":"<ul> <li><code>/edge-isr/status/?tag=&lt;tag&gt;</code> \u2192 <code>{\"tag\": \"...\",\"urls\": [\"...\"]}</code></li> <li><code>/edge-isr/status/?url=&lt;url&gt;</code> \u2192 <code>{\"url\": \"...\",\"tags\": [\"...\"]}</code></li> </ul> <p>Use them to inspect mappings, debug invalidations, or replay warmups.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#decorators","title":"Decorators","text":""},{"location":"api/#isrtagsnone-s_maxage300-swr3600-varynone","title":"<code>isr(tags=None, s_maxage=300, swr=3600, vary=None)</code>","text":"<ul> <li><code>tags</code>: <code>callable(request, *args, **kwargs) -&gt; Iterable[str]</code></li> <li><code>s_maxage</code>: seconds for CDN/shared caches</li> <li><code>swr</code>: seconds for <code>stale-while-revalidate</code></li> <li><code>vary</code>: iterable of header names to merge into <code>Vary</code></li> </ul>"},{"location":"api/#request-context","title":"Request Context","text":"<ul> <li><code>request.edge_isr.add_tags(iterable_of_tags)</code></li> </ul>"},{"location":"api/#helpers","title":"Helpers","text":"<ul> <li><code>tag(namespace, id_or_str) -&gt; str</code> \u2192 <code>\"namespace:id\"</code></li> </ul>"},{"location":"api/#tag-graph-edge_isrgraph","title":"Tag Graph (<code>edge_isr.graph</code>)","text":"<ul> <li><code>bind(url, tags)</code></li> <li><code>unbind(url)</code></li> <li><code>urls_for(tags) -&gt; list[str]</code></li> <li><code>tags_for(url) -&gt; list[str]</code></li> </ul>"},{"location":"api/#revalidation-edge_isrrevalidatetasks","title":"Revalidation (<code>edge_isr.revalidate.tasks</code>)","text":"<ul> <li><code>revalidate_by_tags(tags) -&gt; list[str]</code> (returns URLs)</li> <li><code>warmup_url(url)</code></li> </ul>"},{"location":"api/#settings-edge_isr","title":"Settings (<code>EDGE_ISR</code>)","text":"<p>```python EDGE_ISR = {   \"REDIS_URL\": \"...\",   \"DEFAULTS\": {\"s_maxage\": 300, \"stale_while_revalidate\": 3600},   \"QUEUE\": {\"backend\": \"inline|celery|rq\", \"queue_name\": \"edge_isr\"},   \"CDN\": {...},  # cloudflare | cloudfront }</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#docsconceptsmd","title":"<code>docs/concepts.md</code>","text":"<p>```markdown</p>"},{"location":"concepts/#concepts","title":"Concepts","text":""},{"location":"concepts/#swr-stale-while-revalidate","title":"SWR (Stale-While-Revalidate)","text":"<p>We return cached content immediately (fast TTFB). If the response is stale but within the SWR window, we serve it and trigger a background refresh. Users never wait for recomputation.</p>"},{"location":"concepts/#tags-tag-graph","title":"Tags &amp; Tag Graph","text":"<ul> <li>Tags are strings like <code>post:42</code>, <code>category:7</code>.</li> <li>The graph maintains two sets in Redis:</li> <li><code>tag -&gt; {urls}</code> and <code>url -&gt; {tags}</code>.</li> <li>On data changes, we resolve impacted URLs by tags and revalidate only those.</li> </ul>"},{"location":"concepts/#revalidation","title":"Revalidation","text":"<p>Triggered by signals, management commands, or the API: 1. Resolve URLs by tag(s). 2. Optionally purge those URLs on your CDN. 3. Warm them (HTTP GET with <code>X-Edge-ISR-Warmup: 1</code>) to prefill caches.</p>"},{"location":"concepts/#decorator-vs-middleware","title":"Decorator vs Middleware","text":"<ul> <li>Decorator applies per-view policy and binds tags (status 200 only).</li> <li>Middleware provides safe defaults when no decorator policy is present and never overrides explicit headers.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thanks for your interest in django-edge-isr! This document explains how to set up your dev environment, run tests, follow our style guides, and open high-quality pull requests.</p>"},{"location":"contributing/#table-of-contents","title":"Table of contents","text":"<ul> <li>Getting started</li> <li>Project layout</li> <li>Run the example app</li> <li>Testing</li> <li>Linting &amp; formatting</li> <li>Pre-commit hooks</li> <li>Git &amp; PR conventions</li> <li>Design guidelines</li> <li>Performance &amp; safety checks</li> <li>Good first issues</li> <li>Opening issues</li> <li>Security</li> <li>License</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting started","text":"<pre><code># 1) Create &amp; activate virtualenv\npython -m venv .venv\nsource .venv/bin/activate\n\n# 2) Install in editable mode with dev extras\npip install -e \".[dev]\"\n\n# 3) Optional: start a local Redis (tests use fakeredis by default)\nredis-server  # (optional)\n</code></pre> <p>We support Python 3.10+ and Django 4.2 / 5.x in the 0.x series.</p>"},{"location":"contributing/#project-layout","title":"Project layout","text":"<pre><code>\u251c\u2500 src/edge_isr/         # package code\n\u2502  \u251c\u2500 connectors/        # CDN connectors (cloudflare, cloudfront)\n\u2502  \u251c\u2500 revalidate/        # queue adapters + tasks\n\u2502  \u251c\u2500 admin/             # minimal admin endpoints (JSON)\n\u2502  \u251c\u2500 middleware.py      # default SWR policy + tag binding\n\u2502  \u251c\u2500 decorators.py      # @isr(...) for views/fragments\n\u2502  \u2514\u2500 ...\n\u251c\u2500 tests/                # pytest + pytest-django (in-memory DB)\n\u2502  \u251c\u2500 django_settings.py # isolated settings for tests\n\u2502  \u251c\u2500 urls.py, views.py  # tiny test endpoints\n\u2502  \u2514\u2500 ...                # unit &amp; integration tests\n\u251c\u2500 example/              # demo Django project (manual e2e)\n\u251c\u2500 docs/                 # documentation sources\n\u2514\u2500 pyproject.toml        # build + tooling config\n</code></pre>"},{"location":"contributing/#run-the-example-app","title":"Run the example app","text":"<p>The <code>example/</code> project helps you test the package manually:</p> <pre><code>cd example\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py runserver\n# Visit http://127.0.0.1:8000/post/1/ (see README for quick steps)\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We use pytest + pytest-django. Tests are isolated from your system Redis via fakeredis.</p> <ul> <li>Run the full suite:</li> </ul> <pre><code>python -m pytest -q\n</code></pre> <ul> <li>Run a subset:</li> </ul> <pre><code>python -m pytest tests/test_graph.py::test_bind_and_urls_for -q\n</code></pre> <ul> <li>Useful envs:</li> </ul> <pre><code># show prints/logs on failure\npytest -q -s\n# stop on first failure\npytest -q -x\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing tests","text":"<ul> <li>Place tests in <code>tests/</code> and import the package as <code>edge_isr</code>.</li> <li>If you need Redis, don\u2019t hit a real server \u2014 use the already-configured <code>fakeredis</code> fixture (<code>tests/conftest.py</code> patches <code>edge_isr.graph.redis.from_url</code> automatically).</li> <li>HTTP tests can use Django\u2019s <code>client</code> fixture.</li> <li>Prefer small, focused tests; add one failing test per bug before fixing it.</li> </ul> <p>Minimal example:</p> <pre><code># tests/test_my_feature.py\nfrom edge_isr import tag, graph\n\ndef test_something():\n    url = \"http://testserver/x/\"\n    t = tag(\"post\", 123)\n    graph.bind(url, [t])\n    assert url in graph.urls_for([t])\n</code></pre>"},{"location":"contributing/#linting-formatting","title":"Linting &amp; formatting","text":"<p>We follow the common Python toolchain:</p> <ul> <li>Black \u2013 the only formatter (opinionated, deterministic).</li> <li>Ruff \u2013 linter (fast, catches style &amp; small logic mistakes). We use <code>ruff --fix</code> for safe auto-fixes, not for formatting.</li> </ul> <p>Run locally:</p> <pre><code># format\nblack .\n\n# lint\nruff check .\n# or apply safe auto-fixes:\nruff check . --fix\n</code></pre> <p>Black &amp; Ruff settings live in <code>pyproject.toml</code> (<code>[tool.black]</code>, <code>[tool.ruff]</code>).</p>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>We recommend installing pre-commit to run Black/Ruff and basic hygiene checks before every commit.</p> <pre><code>pip install pre-commit\npre-commit install\npre-commit run --all-files\n</code></pre> <p><code>.pre-commit-config.yaml</code> includes:</p> <ul> <li><code>end-of-file-fixer</code>, <code>trailing-whitespace</code>, <code>check-yaml</code>, <code>check-toml</code>, <code>debug-statements</code></li> <li>Black</li> <li>Ruff (lint only; no ruff-format)</li> </ul>"},{"location":"contributing/#git-pr-conventions","title":"Git &amp; PR conventions","text":"<ul> <li>Branching: open feature/bug branches off <code>develop</code> (e.g. <code>feat/connector-cloudfront</code>, <code>fix/tag-ttl</code>).</li> <li> <p>Commits: use Conventional Commits:</p> </li> <li> <p><code>feat:</code>, <code>fix:</code>, <code>docs:</code>, <code>test:</code>, <code>refactor:</code>, <code>chore:</code>\u2026</p> </li> <li> <p>PR checklist:</p> </li> <li> <p>[ ] Title uses Conventional Commits</p> </li> <li>[ ] Tests added/updated and pass locally (<code>pytest -q</code>)</li> <li>[ ] Lint &amp; format pass (<code>pre-commit run --all-files</code>)</li> <li>[ ] Docs updated (<code>README</code>, <code>docs/</code>, examples if applicable)</li> <li>[ ] No breaking changes unless explicitly discussed</li> </ul> <p>Small, focused PRs are merged faster than \u201cmega PRs\u201d.</p>"},{"location":"contributing/#design-guidelines","title":"Design guidelines","text":"<ul> <li>Opt-in: ISR is explicit (<code>@isr</code>) \u2014 never cache private/personalized endpoints by default.</li> <li>Headers first: SWR semantics via <code>Cache-Control: s-maxage=..., stale-while-revalidate=...</code>.</li> <li>Tag graph is the source of truth: always bind <code>url \u2194 tags</code> for targeted invalidations.</li> <li>Connectors are optional: package must work without Cloudflare/CloudFront (reverse proxy or just origin cache).</li> <li>Safe-by-default: no infinite loops (idempotent warmups), respect <code>Vary</code>, handle non-200 responses gracefully.</li> <li>DX matters: clear errors, good defaults, minimal boilerplate.</li> </ul>"},{"location":"contributing/#performance-safety-checks","title":"Performance &amp; safety checks","text":"<ul> <li> <p>Avoid origin stampede:</p> </li> <li> <p>serve stale within SWR window, revalidate once in background</p> </li> <li>queue warmups and throttle them</li> <li>Keep Redis keys small (we hash long URL keys internally).</li> <li>Don\u2019t bind on non-200 responses; don\u2019t purge on empty resolution sets.</li> <li>Add tests around headers, <code>Vary</code>, and tag resolution for new features.</li> </ul>"},{"location":"contributing/#good-first-issues","title":"Good first issues","text":"<ul> <li>Connector coverage: add more tests for CloudFront invalidations (batching, quotas).</li> <li>Fragment caching: prototype <code>@isr_fragment</code> / <code>{% isrcache %}</code> with a tiny API and tests.</li> <li>Admin UX: filters, pagination, and simple replay actions in <code>edge_isr.admin</code>.</li> <li>Metrics: Prometheus exporter (warmup latency, purge latency, hit ratio if available).</li> <li>Docs: short \u201crecipes\u201d for Django REST Framework, HTMX, Wagtail.</li> </ul> <p>If you\u2019re unsure where to start, comment on an issue and we\u2019ll help you scope it.</p>"},{"location":"contributing/#opening-issues","title":"Opening issues","text":"<p>Please include:</p> <ul> <li>Environment (Python/Django versions), package version/commit</li> <li>Minimal reproduction (view/model snippet, headers observed)</li> <li>Expected vs. actual behavior</li> <li>Logs/tracebacks (trim to essentials)</li> </ul> <p>Bug reports with a failing test case are \u2764\ufe0f.</p>"},{"location":"contributing/#security","title":"Security","text":"<p>If you believe you\u2019ve found a security issue, do not open a public issue. Please email the maintainers privately: hamabarhamou@gmail.com. We\u2019ll respond quickly and coordinate a fix.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions are licensed under the project\u2019s MIT license.</p>"},{"location":"deployment/","title":"Deployment Guide","text":""},{"location":"deployment/#docsdeploymentmd","title":"<code>docs/deployment.md</code>","text":"<p>```markdown</p>"},{"location":"deployment/#deployment","title":"Deployment","text":""},{"location":"deployment/#with-a-cdn-recommended","title":"With a CDN (recommended)","text":"<ul> <li>Enable caching for HTML at the edge.</li> <li>Respect origin <code>Cache-Control</code> headers.</li> <li>Allow <code>stale-while-revalidate</code>.</li> <li>Use precise URL purge/invalidation APIs.</li> </ul>"},{"location":"deployment/#without-a-cdn","title":"Without a CDN","text":"<ul> <li>Reverse proxy (Varnish/Nginx) or just Django's cache.</li> <li>You still get SWR behavior and warmups.</li> </ul>"},{"location":"deployment/#gotchas","title":"Gotchas","text":"<ul> <li>Don\u2019t decorate private/personalized pages.</li> <li>Use <code>Vary</code> helpers for locale/device if needed.</li> <li>Keep Redis close to your app (latency matters).</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>Django 4.2/5.x</li> <li>Redis (prod) \u2014 tests use fakeredis</li> </ul>"},{"location":"quickstart/#install","title":"Install","text":"<pre><code>pip install django-edge-isr\n# or dev:\npip install -e \".[dev]\"\n</code></pre>"},{"location":"quickstart/#settings","title":"Settings","text":"<pre><code># settings.py\nINSTALLED_APPS += [\"edge_isr\"]\nMIDDLEWARE += [\"edge_isr.middleware.EdgeISRMiddleware\"] # injects default SWR headers\n\nEDGE_ISR = {\n  \"REDIS_URL\": \"redis://localhost:6379/0\",\n  \"DEFAULTS\": {\"s_maxage\": 300, \"stale_while_revalidate\": 3600},\n  # Optional queue + CDN:\n  # \"QUEUE\": {\"backend\": \"celery\", \"queue_name\": \"edge_isr\"},\n  # \"CDN\": {\"provider\": \"cloudflare\", \"zone_id\": \"...\", \"api_token\": \"...\"},\n}\n</code></pre>"},{"location":"quickstart/#use-the-decorator","title":"Use the decorator","text":"<pre><code>from edge_isr import isr, tag\n\n@isr(tags=lambda req, post_id: [tag(\"post\", post_id)], s_maxage=300, swr=3600)\ndef post_detail(request, post_id):\n    post = Post.objects.select_related(\"category\").get(pk=post_id)\n    request.edge_isr.add_tags([tag(\"category\", post.category_id)])\n    return render(request, \"post_detail.html\", {\"post\": post})\n</code></pre>"},{"location":"quickstart/#hook-model-changes","title":"Hook model changes","text":"<pre><code>from django.db.models.signals import post_save, post_delete\nfrom edge_isr import revalidate_by_tags, tag\n\n@receiver([post_save, post_delete], sender=Post)\ndef _post_changed(sender, instance, **kw):\n    revalidate_by_tags([tag(\"post\", instance.pk), tag(\"category\", instance.category_id)])\n</code></pre>"},{"location":"quickstart/#verify","title":"Verify","text":"<pre><code>curl -I http://localhost:8000/post/1/\n# Cache-Control: public, s-maxage=300, stale-while-revalidate=3600\n</code></pre>"},{"location":"release/","title":"Release guide","text":"<p>This guide explains how to publish a new version to PyPI using GitHub Actions.</p>"},{"location":"release/#tldr","title":"TL;DR","text":"<ol> <li>Bump the version in <code>pyproject.toml</code>.</li> <li>Open a PR from <code>develop</code> \u2192 <code>main</code>, let CI pass, then merge.</li> <li>Create an annotated tag <code>vX.Y.Z</code> on <code>main</code> and push it.</li> <li>The <code>release.yml</code> workflow builds wheels/sdist, runs <code>twine check</code>, and uploads to PyPI.</li> <li>Verify the release: <code>pip install django-edge-isr==X.Y.Z</code>.</li> </ol>"},{"location":"release/#prerequisites","title":"Prerequisites","text":"<ul> <li>Repository variable <code>PUBLISH_TO_PYPI</code> set to <code>true</code> Settings \u2192 Secrets and variables \u2192 Variables \u2192 Add <code>PUBLISH_TO_PYPI=true</code>.</li> <li>Repository secret <code>PYPI_API_TOKEN</code> configured   Settings \u2192 Secrets and variables \u2192 Secrets \u2192 Add <code>PYPI_API_TOKEN</code> (a <code>pypi-...</code> token).</li> <li>Workflow file <code>.github/workflows/release.yml</code> present (build + <code>twine</code> upload).</li> <li>Branch protections set as you like (e.g., enforce PRs to <code>main</code>, no merge commits).</li> </ul>"},{"location":"release/#steps","title":"Steps","text":""},{"location":"release/#1-bump-the-version","title":"1) Bump the version","text":"<p>Edit <code>pyproject.toml</code>:</p> <pre><code>[project]\nversion = \"X.Y.Z\"\n````\n\nCommit on `develop`.\n\n### 2) Open PR to `main`\n\n* Open a PR: `develop` \u2192 `main`.\n* Wait for all CI checks (lint/tests/docs) to pass.\n* Merge the PR (recommended: **Squash and merge** or **Rebase and merge** if merge commits are blocked).\n\n### 3) Tag the release\n\nCreate a tag **on `main`** that matches the version:\n\n```bash\ngit switch main\ngit pull\ngit tag vX.Y.Z -m \"Release X.Y.Z\"\ngit push origin vX.Y.Z\n</code></pre> <p>The <code>release.yml</code> workflow is triggered by tags matching <code>v*.*.*</code>.</p>"},{"location":"release/#4-what-the-workflow-does","title":"4) What the workflow does","text":"<ul> <li>Checks that <code>pyproject.toml</code> version matches the tag.</li> <li>Builds sdist and wheel (<code>python -m build</code>).</li> <li>Runs <code>twine check dist/*</code> to validate metadata.</li> <li>Uploads to PyPI using the <code>PYPI_API_TOKEN</code>.</li> </ul>"},{"location":"release/#5-verify-the-release","title":"5) Verify the release","text":"<p>In a clean virtualenv:</p> <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\npip install --upgrade pip\npip install django-edge-isr==X.Y.Z\npython -c \"import edge_isr; print(edge_isr.__version__)\"\n</code></pre> <p>Also verify the docs site: https://hamabarhamou.github.io/django-edge-isr/</p>"},{"location":"release/#optional-testpypi-dry-run","title":"(Optional) TestPyPI dry-run","text":"<p>If you want to test packaging before the public release:</p> <pre><code>python -m build\npython -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n# then test install:\npip install -i https://test.pypi.org/simple/ django-edge-isr==X.Y.Z\n</code></pre> <p>You\u2019ll need a TestPyPI token if you go that route.</p>"},{"location":"release/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Version mismatch (workflow fails early): Ensure the tag <code>vX.Y.Z</code> matches <code>[project].version</code> in <code>pyproject.toml</code>.</li> <li>\u201cInvalidDistribution: Metadata is missing required fields\u201d:   Remove old <code>dist/</code>, rebuild locally with <code>python -m build</code>, run <code>python -m twine check dist/*</code> to catch issues before pushing a tag.</li> <li>\u201cFile already exists\u201d on PyPI: You pushed the same version twice. Bump the version and re-tag.</li> <li>CI doesn\u2019t publish: Check that <code>PUBLISH_TO_PYPI=true</code> (variable), the secret <code>PYPI_API_TOKEN</code> is set, and the tag pattern matches <code>v*.*.*</code>.</li> </ul>"},{"location":"revalidation/","title":"Revalidation Pipeline","text":""},{"location":"revalidation/#flow","title":"Flow","text":"<ol> <li>Change detected (signal, command, or manual call).</li> <li><code>urls = urls_for(tags)</code></li> <li>Purge URLs on CDN (optional).</li> <li><code>warmup_url(url)</code> enqueued per URL.</li> </ol>"},{"location":"revalidation/#warmup","title":"Warmup","text":"<ul> <li>Sends <code>GET &lt;url&gt;</code> with header <code>X-Edge-ISR-Warmup: 1</code>.</li> <li>Middleware/View recomputes and updates headers/graph.</li> </ul>"},{"location":"revalidation/#queues","title":"Queues","text":"<ul> <li><code>inline</code> (dev), <code>celery</code>, <code>rq</code>. Configure via <code>EDGE_ISR[\"QUEUE\"]</code>.</li> </ul>"},{"location":"revalidation/#commands","title":"Commands","text":"<p>```bash python manage.py revalidate_tags post:42 category:7 python manage.py warm_url https://example.com/post/42/</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<ul> <li>No settings configured: set <code>DJANGO_SETTINGS_MODULE</code> or configure <code>EDGE_ISR</code>.</li> <li>Redis errors: check <code>REDIS_URL</code> and connectivity.</li> <li>Headers missing: ensure middleware is installed and decorator applied; check for other middlewares overriding <code>Cache-Control</code>.</li> <li>CDN not purging: verify credentials/zone/distribution and that you\u2019re purging exact URLs.</li> <li>Tests fail with \u201cNo module named 'tests'\u201d: run <code>python -m pytest</code> or ensure PYTHONPATH includes repo root.</li> </ul>"}]}